# -*- coding: utf-8 -*-
"""Amazon Sales 2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12QkuKBeo2uWlKsmbV5ZjtrkkkcFFb_ma
"""

#ðŸ”¹ Step 0: Load and Preview the Data

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the CSV file into a DataFrame
df = pd.read_csv("amazon_sales_data 2025.csv")

# Show basic structure and first few rows
print(df.info())  # Column names, types, and non-null counts
print(df.head())  # First 5 rows to preview the data

#âœ… Explanation:
#pandas is used for data handling.

#matplotlib and seaborn are for plotting.

#df.info() tells you data types and missing values.

#df.head() shows the top 5 rows to understand structure.





#ðŸ”¹ Step 1: Convert Date Column and Extract Time Features

# Convert 'Date' from string to datetime format
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%y')

# Create new time-related columns
df['Month'] = df['Date'].dt.to_period('M')     # e.g., 2025-03
df['Week'] = df['Date'].dt.isocalendar().week  # ISO week number
df['Day'] = df['Date'].dt.day_name()           # Monday, Tuesday, etc.

#âœ… Explanation:
#Converts Date to proper date format for analysis.

#Extracts Month, Week, and Day to help with time-based trends.





#ðŸ”¹ Step 2: Monthly Sales Trend

# Group total sales by Month
monthly_sales = df.groupby('Month')['Total Sales'].sum()

# Plot the trend
monthly_sales.plot(kind='line', marker='o', figsize=(10, 5), title='Monthly Sales Trend')
plt.ylabel("Total Sales")
plt.xlabel("Month")
plt.grid(True)
plt.tight_layout()
plt.show()

#âœ… Explanation:
#Groups data by Month and sums up the Total Sales.

#Line plot shows how sales changed month-to-month.





#ðŸ”¹ Step 3: Top-Selling Products

# Group by Product, sum the sales, and get top 10
top_products = df.groupby('Product')['Total Sales'].sum().sort_values(ascending=False).head(10)

# Plot as a bar chart
top_products.plot(kind='bar', title='Top 10 Selling Products', figsize=(10, 5))
plt.ylabel("Total Sales")
plt.xlabel("Product")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#âœ… Explanation:
#Groups data by Product and totals sales.

#Sorts to find top 10 products.

#Bar chart helps identify the most popular items.





#ðŸ”¹ Step 4: Sales by Category (Pie Chart)

# Sum sales by Category
category_sales = df.groupby('Category')['Total Sales'].sum()

# Plot as a pie chart
category_sales.plot(kind='pie', autopct='%1.1f%%', title='Sales by Category', figsize=(6, 6))
plt.ylabel('')  # Hide y-label for clean look
plt.tight_layout()
plt.show()

#âœ… Explanation:
#Sums sales for each Category.

#Pie chart shows percentage of total sales for each category.





#ðŸ”¹ Step 5: Payment Method Distribution

# Count how many orders per payment method
payment_counts = df['Payment Method'].value_counts()

# Bar plot
payment_counts.plot(kind='bar', color='skyblue', title='Payment Method Distribution', figsize=(8, 4))
plt.ylabel("Number of Orders")
plt.xlabel("Payment Method")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#âœ… Explanation:
#value_counts() gives the count of each payment method.

#Bar chart shows which payment methods are used most.





#ðŸ”¹ Step 6: Order Status Count

# Plot count of each order status using Seaborn
sns.countplot(data=df, x='Status', palette='Set2')
plt.title("Order Status Count")
plt.tight_layout()
plt.show()

#âœ… Explanation:
#Visualizes how many orders are Cancelled, Pending, etc.

#Good for understanding customer fulfillment issues.





#ðŸ”¹ Step 7: Repeat Customers (Multiple Orders)

# Count number of orders per customer
repeat_customers = df["Customer Name"].value_counts()

# Filter customers with more than 1 order
repeat_customers = repeat_customers[repeat_customers > 1]

print("Number of repeat customers:", len(repeat_customers))
print("Top 5 repeat customers:")
print(repeat_customers.head())

# Plot top repeat customers
repeat_customers.head(10).plot(kind='barh', title='Top Repeat Customers', figsize=(8, 5), color='orange')
plt.xlabel("Number of Orders")
plt.ylabel("Customer Name")
plt.tight_layout()
plt.show()





#âœ… 1. Build an Interactive Dashboard (Using Plotly + Dash)

pip install dash plotly pandas



#ðŸš€ Full Dash App Code for Your Portfolio

import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Load and prepare data
df = pd.read_csv("amazon_sales_data 2025.csv")
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%y')
df['Month'] = df['Date'].dt.to_period('M').astype(str)
df['Profit'] = df['Total Sales'] * 0.20

# Create Dash app
app = dash.Dash(__name__)
app.title = "Amazon Sales Dashboard"

# Layout
app.layout = html.Div([
    html.H1("ðŸ“¦ Amazon Sales Dashboard (2025)", style={'textAlign': 'center'}),

    dcc.Dropdown(
        id='category-filter',
        options=[{'label': cat, 'value': cat} for cat in df['Category'].unique()],
        placeholder="Select Category (optional)",
        style={'width': '50%', 'margin': 'auto'}
    ),

    dcc.Graph(id='monthly-sales'),
    dcc.Graph(id='top-products'),
    dcc.Graph(id='city-sales'),
    dcc.Graph(id='status-distribution')
])

# Callbacks
@app.callback(
    [Output('monthly-sales', 'figure'),
     Output('top-products', 'figure'),
     Output('city-sales', 'figure'),
     Output('status-distribution', 'figure')],
    [Input('category-filter', 'value')]
)
def update_graphs(selected_category):
    data = df[df['Category'] == selected_category] if selected_category else df

    monthly = data.groupby('Month')['Total Sales'].sum().reset_index()
    fig1 = px.line(monthly, x='Month', y='Total Sales', title='Monthly Sales Trend')

    top_products = data.groupby('Product')['Total Sales'].sum().nlargest(10).reset_index()
    fig2 = px.bar(top_products, x='Product', y='Total Sales', title='Top 10 Products')

    cities = data.groupby('Customer Location')['Total Sales'].sum().nlargest(10).reset_index()
    fig3 = px.bar(cities, x='Customer Location', y='Total Sales', title='Top Cities by Sales')

    status = data['Status'].value_counts().reset_index()
    status.columns = ['Status', 'Count']
    fig4 = px.pie(status, names='Status', values='Count', title='Order Status Distribution')

    return fig1, fig2, fig3, fig4

# Run the server
if __name__ == '__main__':
    app.run(debug=True)













